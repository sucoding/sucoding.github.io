<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[javascript：逻辑操作符&&和||]]></title>
      <url>%2F2017%2F04%2F08%2Fjavascript%EF%BC%9A%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%92%8C%2F</url>
      <content type="text"><![CDATA[一、逻辑与（&amp;&amp;）逻辑与操作符由两个和号（&amp;&amp;）表示。第一个操作数第二个操作数结果truetruetruetruefalsefalsefalsetruefalsefalsefalsefalse从字面上来说，只有前后都是true的时候才返回true，否则返回false。alert(true &amp;&amp; true); // true alert(true &amp;&amp; false); // false alert(false &amp;&amp; false); // false alert(false &amp;&amp; true); // false 然后，根据上面经验，我们看看“&amp;&amp;”号前后，不单单是布尔类型的情况。alert(‘’ &amp;&amp; 1);结是返回’’,“&amp;&amp;”前面’’是false,后面是1是true。alert(‘’ &amp;&amp; 0);结是返回’’,“&amp;&amp;”前面’’是false,后面是0也是false。alert(‘a’&amp;&amp;1);结是返回1,“&amp;&amp;”前面’’a是true,后面是1也是true。alert(‘a’&amp;&amp;0);结是返回0,“&amp;&amp;”前面’’a是true,后面是0是false。alert(‘a’&amp;&amp;’’);结是返回’’,“&amp;&amp;”前面’’a是true,后面是’’是false。alert(0&amp;&amp;’a’);结是返回0,“&amp;&amp;”前面’’0是false,后面是’a’是true。alert(0&amp;&amp;’’);结是返回0,“&amp;&amp;”前面’’0是false,后面是’’也是false。这意味着1、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;2、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;一、先来说说||（逻辑或）,从字面上来说，只有前后都是false的时候才返回false，否则返回true。alert(true||false); // truealert(false||true); // truealert(true||true); // truealert(false||false); // false但是，从深层意义上来说的话，却有另一番天地，试下面代码alert(0||1);显然，我们知道，前面0意味着false,而后面1意味着true,那么上面的结果应该是true,而事实返回的结果是1。再看下面代码：alert(2||1);我们知道，前面2是true,后面1也是true,那返回结果又是什么呢？测试结果是2,继续看：alert(‘a’||1);同样，前面’a’是true，后面1也是true;测试结果是’a’,下面alert(‘’||1);由上，我们知道前面’’是false,后面1是true,而返回结果是1。再看下面alert(‘a’||0);前面’a’是true，而后面0是false,返回结果是’a’，继续下面alert(‘a’||’b’);前面’a’是true,后面’b’是false,返回结果是’a’，我们继续下面alert(‘’||0);前面’’是false,后面0同样是false,返回结果是0alert(0||’’);前面0是false，后面’’是false，返回结果是’’这就意味1、只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。2、只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。让我们总结一下：1、只要“||”前面为false，无论“||”后面是true还是false，结果都返回“||”后面的值。2、只要“||”前面为true，无论“||”后面是true还是false，结果都返回“||”前面的值。3、只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;4、只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;由上两个测试可知，逻辑运算符，“||”和“&amp;&amp;”都是遵行短路原则，只要确定符号前面的真假，既可确定返回值。需要说明的是“&amp;&amp;”的优先级是高于“||”的，下面测试：alert(1||’a’&amp;&amp;2);返回结果是1。根据反证原理，我们假设“||”的优先级不低于“&amp;&amp;”（这里只所以用“不低于”，是为了同时证明等级相同的情况）。根据上面我们得出的结论（1），（1||’a’）将返回前面的值1，(1&amp;&amp;2)根据结论(4)应该返回后面的值2。这显然不对，由此可知“&amp;&amp;”的优先级是高于“||”的。各种数据类型及其对应的转换规则数据类型转换为 true 的值转换为 false 的值BooleantruefalseString任何非空字符串“” 空字符串Number任何非零数字值（包括无穷大）0和NaNObject任何对象nullUnderfinedn/a（N/A），not application的缩写，意思是“不适用”underfined]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css实现水平垂直居中]]></title>
      <url>%2F2017%2F04%2F01%2Fcss%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%2F</url>
      <content type="text"><![CDATA[方法一：固定元素的宽高，然后通过 margin 的负值（元素宽高的一半）来实现。1&lt;div class="box1"&gt;我是要垂直居中的盒子&lt;/div&gt;12345678910.box1 &#123; position: absolute; top: 50%; left: 50%; width: 100px; height: 100px; margin-top: -50px; margin-left: -50px; background-color: #ff8300;&#125;方法二：margin 无需设定元素宽高的一半的负值，margin: auto 距离四边的值为 auto，它的计算方式是平均分配尺寸空间1&lt;div class="box2"&gt;我是要垂直居中的盒子&lt;/div&gt;1234567891011.box2 &#123; position: absolute; top: 0; right: 0; bottom: 0; left: 0; margin: auto; width: 100px; height: 100px; background-color: #ff8300;&#125;方法三：translate(-50%, -50%) 相对自身的宽高大小进行偏移，偏移量是自身的一半1&lt;div class="box3"&gt;我是要垂直居中的盒子&lt;/div&gt;123456789.box3 &#123; position: absolute; top: 50%; left: 50%; width: 100px; height: 100px; background-color: #ff8300; transform: translate(-50%, -50%);&#125;方法四：justify-content 设置主轴线上的对齐方式，align-items 设置侧轴线上的对齐方式123&lt;div class="box4"&gt; &lt;p&gt;我是要垂直居中的盒子&lt;/p&gt;&lt;/div&gt;12345678910.box4 &#123; height: 200px; display: flex; justify-content: center; align-items: center; background-color: orange;&#125;.box4 p &#123; background-color: #ff8300;&#125;方法五：利用 table 的特性，如果当高度不确定的时候，可在外层套一层再设置为 ‘display: table’，形成一个类表格模型。123&lt;div class="box5"&gt; &lt;span&gt;我是要垂直居中的盒子&lt;/span&gt;&lt;/div&gt;123456789101112.box5 &#123; display: table-cell; width: 200px; height: 200px; background-color: orange; text-align: center; vertical-align: middle; /*float: left;*/ /*添加浮动后，垂直居中会失效*/&#125;.box5 span &#123; background-color: #ff8300;&#125;方法六：最常见的做法，针对子元素是 行内元素 或 行内块级元素 有效。123&lt;div class="box6"&gt; 我是要垂直居中的内容&lt;/div&gt;123456.box6 &#123; height: 50px; line-height: 50px; text-align: center; background-color: orange;&#125;方法七：通过 :before 伪元素生成一个占位内容，两个行内块级元素通过 vertical-align 设置垂直对齐方式也就是 ‘middle’，垂直方向上居中对齐，父元素盒子 text-align: center 对两个行内块级元素设置水平居中。 ps: 可添加 :before 伪元素的宽度来观察对齐的现象。123&lt;div class="box7"&gt; &lt;span class="center"&gt;我是要垂直居中的内容&lt;/span&gt;&lt;/div&gt;1234567891011121314151617181920.box7 &#123; width: 200px; height: 200px; border: 1px solid #000; text-align: center; font-size: 0;&#125;.box7:before &#123; content: ''; display: inline-block; height: 100%; background-color: #000; vertical-align: middle;&#125;.center &#123; display: inline-block; background-color: orange; font-size: 12px; vertical-align: middle;&#125;以上 absolute 的方法同样适应于 fixed。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[（转）第一份工作，成长比收入更重要]]></title>
      <url>%2F2017%2F03%2F21%2F%EF%BC%88%E8%BD%AC%EF%BC%89%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%B7%A5%E4%BD%9C%EF%BC%8C%E6%88%90%E9%95%BF%E6%AF%94%E6%94%B6%E5%85%A5%E6%9B%B4%E9%87%8D%E8%A6%81%2F</url>
      <content type="text"><![CDATA[知页： http://mp.weixin.qq.com/s/fkaKKXxfox6sZwtQku2bQw职场里的2/8法则相信大家都听说过2/8法则，就是这世界上20%的人拥有80%的社会财富，行业里前20%的公司赚走了整个市场80%的钱，我们在20%的App上花费了80%的手机使用时间。2/8法则认为：原因和结果、投入和产出、努力和报酬之间存在着巨大的不平衡，从数学角度讲就是幂律分布 (Power Law Distribution) 。同样的，2/8法则在职场中也频繁出现。公司里20%的人贡献着80%的价值，20%的人拿走了80%的报酬。所以作为两家公司的创始人，我想分享一下站在公司的角度，老板、部门负责人还有HR是怎么看待招人这件事的。首先，对于核心岗位的人，也就是20%的人。我们会用“抢”的策略，用高于市场价，有时候甚至高出其原本薪资数倍的待遇来（也包含股权激励）吸引他们。因为我们发现，核心岗位上的一个优秀人才，能够帮助公司完成一些原本无法想象的目标。就像乔布斯在创业一段时间后曾经说过：“我过去常常认为一位出色的人才能顶两名平庸的员工，现在我认为能顶50名。“今天，绝大部分的优秀公司也都在采取这个策略。对于剩下的80%非核心岗位，通常不会给予比市场价更高的薪资，如果在人才缺口并不紧急的时候，还会试图压低这部分人的收入。看到这里，肯定有人会觉得这些公司都是无良企业，黑心商人。甚至还会觉得职场结构不公平，在”剥削“着职场新人。其实并不是，虽然这些优秀的公司无法提供更高的薪资和更多的福利待遇，但是通常会给年轻人更多的机会和成长空间（因为市场是公平的，要不公司也无法招到人才）。从长远来讲，后者才是决定我们收入的关键。第一份工作很重要几乎没有人的第一份工作就可以担任一家公司的核心职位。如果大家都同意这个观点，就会明白在这个阶段去争取更高的收入是一件毫无意义的事情，因为5,000元和6000元，9,000元和10,000元，本质上并不能影响你的生活。如果在一线城市工作，那更加是赚多少花多少，没有任何存款。最近网上很流行一篇文章”月薪3,000与月薪30,000的文案区别“，文章的内容不是这里关注的重点。但我们可以试想一下，如果自己是那个月薪3,000元的文案，我们需要多久时间才能变成一个月薪30,000元的文案？这个问题也适用于其他职位，大部分人会这么想，作为一个月薪3,000的实习生，假设转正后有5000元。只要自己足够努力，保证每年通过晋升或者跳槽能多增加20%的收入，时间长了就能达到。按照这个思路，从5000元的月收入达到30,000元的月收入我们需要10年时间。明眼人都能看得出来，这条路既不现实又太过漫长。事实也告诉我们，很多写了10年文案的人都是做不到30,000月薪的，而那些达到了30,000月薪的人又通常不需要10年。那应该怎么办呢？人在第一份工作，或者说前几份工作中的成长很重要。它必须让你有机会在接下来的3-5 年时间里能在同一家公司中晋升到核心岗位，或者让你具备跳槽至另外一家公司担任核心岗位的能力。只有这样子，你的收入才能是同级同学，同龄朋友的3-5倍，实现倍数的跳跃。重点关注自身成长我在面试中经常会遇到这类情况，有很多求职者在面试的最后阶段，在我们提出”你还有什么问题想问我们的吗？“，他就会开始询问诸如公司还有什么福利补贴，年假会有几天，加班是否频繁等等问题。只有少部分的有识之士，会抓住这个机会，进一步去了解工作内容、所能承担的职责还有公司对该职位发展的规划。有一次公司给一个年轻的求职者发了offer，隔天就给我们打来了电话，沟通是否可以给他多加2K的薪资（offer上给的是10K/月）。我们问为什么？他说有一家相较传统的公司给了他12K的待遇。但综合各方面考量，他更喜欢我们的公司和团队，也觉得与自己的成长方向更加契合，如果我们同意在原本基础上多给20%的工资与另外一个offer持平，可以立即前来报道。因为公司也还有其他选择，最后并没能满足他的要求，所以他还是选择去了另外那家公司。当然，并不能100%保证加入我们相比于他加入另外一家公司就能有更快的成长，虽然我们还是有信心这么说。但是，在他当下做决策时，的确选择了多20%的薪资相较于自己更喜欢的工作内容和成长环境。我们都太容易陷入一个误区，认为一份工作能带给人最大的回报就是收入。其实不然，工作能带给一个人最大的回报是成长，是成长，是成长（重要的事情说三遍）。如果人生早期的前几份工作看似能让你挣钱多一点，福利多一点，过的体面一点。但在一个并没有很喜欢的环境，自己也没有承担过什么重要的责任，最后导致什么都没有学到，什么机会都没有，各方面也没什么成长。几年做下来，到了三十岁，发现自己还在原地踏步。我周围就有一些海归还有国内的名校毕业生，就这么在外面瞎折腾混了一圈，几年下来发现他们的职业技能和行业认知比应届生高不了多少，还把自己变成了好高骛远的人。第一份工作的收入比同龄人多出个20%不应该沾沾自喜，反之，比别人少拿个20%也不要觉得起点就比别人低。了解自己未来想承担什么核心岗位，审视周围的环境是否能给自己成长才更重要。写在最后肯定有人会问，这些道理都不难理解。那么那些收入低一点，但具备快速成长机会的工作会不会竞争更加激烈，更难得到呢？这个我们可以放心，因为无论在哪个时代，愿意投资未来，延迟享受，还关注自身成长的人都是少数。而原本家境不错的人，大多又会听从老一辈的建议选择一份”稳定又体面“的工作。因此就给有理想有抱负的年轻人留下了巨大的机会。找工作时用成长思维而非收入思维能让我们做出更加正确的选择。工作之后，我们还需要一些有效的方法来帮助自己成长，而这就是知页未来的关注。最后，希望我们都能成长为那20%的人，而不是那拿着仅仅多20%收入的人。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F26%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
    </entry>

    
  
  
</search>
